package main

import (
	"MalwareAnalysisWebApp/pkg/config"
	"MalwareAnalysisWebApp/pkg/handlers"
	"MalwareAnalysisWebApp/pkg/middleware"
	"MalwareAnalysisWebApp/pkg/models"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"log"
	"net/http"
)

func main() {
	r := gin.Default()
	r.LoadHTMLGlob("static/*.html")

	r.Static("/static", "static")

	// Load .env file
	if err := godotenv.Load(); err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	cfg := config.LoadDBConfig()
	db, err := config.InitializeDB(cfg)
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	config.DB = db // Set the global DB instance
	err = db.AutoMigrate(
		&models.User{},
		&models.Hash{},
	)
	if err != nil {
		log.Fatalf("Failed to auto-migrate database schema: %v", err)
	}

	// Redirect any non-defined routes to "/auth"
	r.NoRoute(func(c *gin.Context) {
		c.Redirect(http.StatusSeeOther, "/auth")
	})

	// Define login and registration handling
	r.POST("/login", handlers.LoginHandler)
	r.POST("/register", handlers.RegisterHandler)

	// Serve the authentication page
	r.GET("/auth", func(c *gin.Context) {
		c.HTML(http.StatusOK, "auth.html", gin.H{})
	})

	r.GET("/logout", handlers.LogoutHandler)

	// Create a group for protected routes
	protected := r.Group("/")
	// Apply the AuthMiddleware to this group
	protected.Use(middleware.AuthMiddleware())

	// Now define protected routes
	protected.POST("/analysis", handlers.AnalyzeFileHandler)
	protected.POST("/hashdetails", handlers.DetailsHashHandler)
	protected.GET("/dashboard", func(c *gin.Context) {
		// Ensure the "dashboard.html" template is correctly defined and located in your templates directory
		c.HTML(http.StatusOK, "dashboard.html", gin.H{})
	})

	protected.GET("/submissions", handlers.SubmissionsHandler)
	// Start the server
	if err := r.Run(":8080"); err != nil {
		log.Fatal("Failed to run server: ", err)
	}
}
