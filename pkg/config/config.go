package config

import (
	"fmt"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"os"
)

var DB *gorm.DB

// DBConfig holds the database configuration values
type DBConfig struct {
	DatabaseType string
	DSN          string // Data Source Name
}

// LoadDBConfig loads database configuration from environment variables
func LoadDBConfig() DBConfig {
	return DBConfig{
		DatabaseType: getEnv("DATABASE_TYPE", "sqlite"),
		DSN:          getEnv("DATABASE_DSN", "user_hash.db"),
	}
}

// getEnv tries to get an environment variable, returns fallback if not found
func getEnv(key, fallback string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return fallback
}

// InitializeDB initializes the database connection based on the configuration
func InitializeDB(cfg DBConfig) (*gorm.DB, error) {
	var db *gorm.DB
	var err error

	switch cfg.DatabaseType {
	case "sqlite":
		db, err = gorm.Open(sqlite.Open(cfg.DSN), &gorm.Config{})
	default:
		return nil, fmt.Errorf("unsupported database type %s", cfg.DatabaseType)
	}

	if err != nil {
		return nil, err
	}

	return db, nil
}
