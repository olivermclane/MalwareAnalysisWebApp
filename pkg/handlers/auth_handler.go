/*
This file contains handlers for user registration, login, and logout.
*/
package handlers

import (
	"MalwareAnalysisWebApp/pkg/config"
	"MalwareAnalysisWebApp/pkg/middleware"
	"MalwareAnalysisWebApp/pkg/models"
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
	"net/http"
	"time"
)

// RegisterHandler handles user registration
func RegisterHandler(c *gin.Context) {
	// Fetch form data directly
	username := c.PostForm("Username")
	email := c.PostForm("Email")
	password := c.PostForm("Password")

	// For instance, hash the password before storing it
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to hash password"})
		return
	}

	newUser := models.User{
		Username: username,
		Email:    email,
		Password: string(hashedPassword), // Store the hashed password, not the plain one
	}

	// Attempt to create the new user record in the database
	result := config.DB.Create(&newUser)
	if result.Error != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": result.Error})
		return
	}

	// Respond with a success message
	c.JSON(http.StatusOK, gin.H{"message": "Registration successful"})
}

// LoginHandler handles user login
func LoginHandler(c *gin.Context) {
	var foundUser models.User
	username := c.PostForm("Username")
	password := c.PostForm("Password")

	result := config.DB.Where("username = ?", username).First(&foundUser)
	if result.Error != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Incorrect username or password"})
		return
	}

	err := bcrypt.CompareHashAndPassword([]byte(foundUser.Password), []byte(password))
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Incorrect username or password"})
		return
	}
	if err == nil {
		tokenString, err := middleware.GenerateJWT(foundUser.ID) // Generate the JWT token
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to generate token"})
			return
		}

		// Set the token in an HttpOnly cookie
		http.SetCookie(c.Writer, &http.Cookie{
			Name:     "auth_token",
			Value:    tokenString,
			Path:     "/",
			HttpOnly: true,
			Secure:   false, // Set to true in HTTPS environments
			SameSite: http.SameSiteStrictMode,
			MaxAge:   86400, // Expires in 1 day
		})

		// Redirect to the dashboard
		c.Redirect(http.StatusFound, "/dashboard")
	} else {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Incorrect username or password"})
	}
}

func LogoutHandler(c *gin.Context) {
	// Clear the auth_token cookie
	http.SetCookie(c.Writer, &http.Cookie{
		Name:     "auth_token",
		Value:    "",
		Path:     "/",
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteStrictMode,
		Expires:  time.Unix(0, 0), // Set the cookie to expire immediately
	})

	// Redirect to the login page or home page
	c.Redirect(http.StatusFound, "/auth")
}
