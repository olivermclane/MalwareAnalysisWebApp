/*
This file contains handlers for analyzing files and retrieving details of a hash.
*/
package handlers

import (
	"MalwareAnalysisWebApp/pkg/services"
	"github.com/gin-gonic/gin"
	"net/http"
)

// AnalyzeFileHandler handles file analysis.
func AnalyzeFileHandler(c *gin.Context) {
	file, header, err := c.Request.FormFile("file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "No file is received"})
		return
	}
	defer file.Close()

	// Extract userID from context
	userIDInterface, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// Convert interface{} to uint
	userID, ok := userIDInterface.(uint)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Server error"})
		return
	}

	summary, err := services.AnalyzeFile(file, header.Filename, userID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to analyze file"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"summary": summary})
}

// DetailsHashHandler handles retrieving details of a hash.
func DetailsHashHandler(c *gin.Context) {
	fileHash := c.PostForm("hash")
	// Extract userID from context
	userIDInterface, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// Convert interface{} to uint
	userID, ok := userIDInterface.(uint)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Server error"})
		return
	}

	details, err := services.DetailsHash(fileHash, userID)

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to retrieve details"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"details": details})
}
