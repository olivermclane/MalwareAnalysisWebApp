/*
* Author: Oliver McLane
*
* This file contains middleware functions for authentication using JWT tokens.
 */
package middleware

import (
	"errors"
	"github.com/dgrijalva/jwt-go"
	"github.com/gin-gonic/gin"
	"net/http"
	"os"
	"time"
)

// AuthMiddleware is a Gin middleware function for authentication using JWT tokens.
func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		tokenString := c.GetHeader("Authorization")

		cookie, err := c.Cookie("auth_token")
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized - No token provided"})
			c.Abort()
			return
		}
		// Validate token for user
		userID, err := ValidateTokenAndGetUserID(cookie)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid or missing token"})
			c.Abort()
			return
		}

		if len(tokenString) > 7 && tokenString[:7] == "Bearer " {
			tokenString = tokenString[7:]
		}

		// Set the userID in the Gin context
		c.Set("userID", userID)

		c.Next()
	}
}

// GenerateJWT creates and signs a new JWT token for a given user ID.
func GenerateJWT(userID uint) (string, error) {
	var signingKey = []byte(os.Getenv("JWT_SIGNING_KEY"))

	// Set up claims
	claims := &GoJWTClaim{
		UserID: userID,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(24 * time.Hour).Unix(), // Token expires in 24 hours
		},
	}

	// Create and sign the token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(signingKey)

	if err != nil {
		return "", err
	}

	return tokenString, nil
}

// GoJWTClaim defines the structure of your JWT claims.
type GoJWTClaim struct {
	UserID uint `json:"userID"`
	jwt.StandardClaims
}

// ValidateTokenAndGetUserID validates the JWT token and extracts the user ID.
func ValidateTokenAndGetUserID(tokenString string) (uint, error) {
	// This should be stored securely and must be consistent between token generation and validation
	var signingKey = []byte(os.Getenv("JWT_SIGNING_KEY"))

	// Parse the token
	token, err := jwt.ParseWithClaims(tokenString, &GoJWTClaim{}, func(token *jwt.Token) (interface{}, error) {
		// Verify the token algorithm
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, errors.New("unexpected signing method")
		}
		return signingKey, nil
	})

	if err != nil {
		return 0, err // Token parsing error
	}

	if claims, ok := token.Claims.(*GoJWTClaim); ok && token.Valid {
		// Token is valid
		return claims.UserID, nil
	} else {
		return 0, errors.New("invalid token")
	}
}
